[{"/home/fifteen/src/retsina/client/src/index.js":"1","/home/fifteen/src/retsina/client/src/App.js":"2","/home/fifteen/src/retsina/client/src/views/Word.jsx":"3"},{"size":149,"mtime":1633388491537,"results":"4","hashOfConfig":"5"},{"size":477,"mtime":1633390286978,"results":"6","hashOfConfig":"5"},{"size":2877,"mtime":1633395381120,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"t5yzb3",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"/home/fifteen/src/retsina/client/src/index.js",[],["17","18"],"/home/fifteen/src/retsina/client/src/App.js",["19"],"import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n} from 'react-router-dom';\nimport './App.css';\n\nimport Word from './views/Word.jsx';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" render={() => <div>Hello!</div>}></Route>\n          <Route path=\"/word/:word\" component={Word}></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/home/fifteen/src/retsina/client/src/views/Word.jsx",["20"],"import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from \"react-router-dom\";\n\nfunction WordView(props) {\n  const { word } = useParams();\n\n  const [ wordData, setWordData ] = useState();\n\n  const getWord = useCallback(() => {\n    fetch(`http://localhost:5000/api/words/${word}`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n      }\n    }).then(res => {\n      if (res.ok) {\n        res.json().then(setWordData); \n      }});\n  }, [setWordData, word]);\n\n  useEffect( () => {getWord()}, [getWord] );\n\n  return <>\n<main>\n  <section>\n    <h1><abbr class=\"valid\"><a href=\"\">{wordData && wordData.word}</a></abbr></h1>\n    <span class=\"definition\"><em>{ wordData && wordData.definition }</em></span>\n  </section>\n  <section>\n    <table>\n      <tbody>\n      <tr>\n        <td>Score</td>\n        <td>{ wordData && wordData.score }</td>\n      </tr>\n      <tr>\n        <td>Alphagram</td>\n        <td><abbr>{ wordData && wordData.alphagram }</abbr></td>\n      </tr>\n      <tr>\n        <td>Front hooks</td>\n        <td class=\"flex\">{ wordData && wordData.front_hooks.map(hook => <a href={\"/word/\" + hook + wordData.word }><abbr>{hook}-</abbr></a>) }</td>\n      </tr>\n      <tr>\n        <td>Back hooks</td>\n        <td class=\"flex\">{ wordData && wordData.back_hooks.map(hook => <a href={\"/word/\" + wordData.word + hook}><abbr>-{hook}</abbr></a>) }</td>\n      </tr>\n      <tr>\n        <td>Inner front hook</td>\n        <td class=\"flex\">{ wordData && (wordData.inner_front_hook ? <a href={\"/word/\" + word.slice(1)}><abbr>{word.slice(1)}</abbr></a> : \"none\")}</td>\n      </tr>\n      <tr>\n        <td>Inner back hook</td>\n        <td class=\"flex\">{ wordData && (wordData.inner_back_hook ? <a href={\"/word/\" + word.slice(0, -1)}><abbr>{word.slice(0, -1)}</abbr></a> : \"none\")}</td>\n      </tr>\n      <tr>\n        <td>Back hooks</td>\n        <td class=\"flex\">{ wordData && wordData.back_hooks.map(hook => <a href={\"/word/\" + wordData.word + hook}><abbr>-{hook}</abbr></a>) }</td>\n      </tr>\n      <tr>\n        <td>Anagrams</td>\n        <td class=\"flex\">{ wordData && wordData.anagrams.map(anagram => <a href={\"/word/\" + anagram}><abbr>{anagram}</abbr></a>) }</td>\n      </tr>\n      <tr>\n        <td>Probability</td>\n        <td>{ wordData && wordData.probability}% (rank { wordData && wordData.probability_order })</td>\n      </tr>\n      <tr>\n        <td>Playability</td>\n        <td>{ wordData && wordData.playability} equity (rank { wordData && wordData.playability_order })</td>\n      </tr>\n      </tbody>\n    </table>\n  </section>\n</main>\n<footer>\n  <p>All data generated from <a href=\"https://www.barnesandnoble.com/w/word-judge-usa-maliha-mendoza-mahmood/1117476604\">Word Judge USA</a>.</p>\n  <p>Made with ❤️ and ☕by <a href=\"https://sverona.dev\">S. Verona Malone</a>.</p>\n</footer>\n    </>;\n}\n\nexport default WordView;\n",{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":6,"column":3,"nodeType":"27","messageId":"28","endLine":6,"endColumn":10},{"ruleId":"29","severity":1,"message":"30","line":26,"column":29,"nodeType":"31","endLine":26,"endColumn":40},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]